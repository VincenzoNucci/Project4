<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>debug = false;
guiWidth = display_get_gui_width();
guiHeight = display_get_gui_height();

//la dimensione di uno scacco della griglia di gioco
cellSize = 32;

tilesDepthSoil = 999997;
tilesDepthInstances = 999996;

spawnRoom = -1;
spawnX = 0;
spawnY = 0;
spawnPlayerFacing = -1;
transitionAlpha = 0;
doTransition = false;

clockXMargin = 10;
clockYMargin = 10;

inventoryX = view_wport[0] / 4;
inventoryY = view_hport[0] / 4;
spacing = 31;
openInventory = false;
openOptions = false;
pauseSurface = 0;

enum dir {
    right = 0,
    up = 90,
    left = 180,
    down = 270
}


randomize();
room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(ord("B"))) {
    debug = !debug;
}

if(keyboard_check_pressed(vk_tab)) {
    openInventory = !openInventory;
}

if(keyboard_check_pressed(vk_left)) {
    spacing -= 1;
} else if(keyboard_check_pressed(vk_right)) {
    spacing += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>roomWidth = room_width;
roomHeight = room_height;

if(spawnRoom == -1)
    exit;
if(!instance_exists(obj_player)) {
    instance_create(spawnX, spawnY, obj_player);
} else {
    obj_player.x = spawnX;
    obj_player.y = spawnY;
}
obj_player.facing = spawnPlayerFacing;

//SERVE PER CAMBIARE IL FRAME DEL GIOCATORE DOPO CHE SI CAMBIA UNA STANZA
with(obj_player) {
    switch(facing) {
        case dir.left:
            y_frame = 9;
        break;
        
        case dir.right:
            y_frame = 11;
        break;
        
        case dir.up:
            y_frame = 8;
        break;
        
        case dir.down:
            y_frame = 10;
        break;
        
        default:
            x_frame = 0;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//PARTE PER LO SCHERMO NERO DURANTE LA TRANSIZIONE DELLE STANZE
if(doTransition) {
    if(room != spawnRoom) {
        transitionAlpha += 0.1;
        if(transitionAlpha &gt;= 1)
            room_goto(spawnRoom);
    } else {
        transitionAlpha -= 0.1;
        if(transitionAlpha &lt;= 0) {
            doTransition = false;
        }
    }
    
    draw_set_alpha(transitionAlpha);
    draw_rectangle_colour(0,0,guiWidth,guiHeight,c_black,c_black,c_black,c_black,false);
    draw_set_alpha(1);
}

//DISEGNA IL CERCHIO DELLA MAPPA IN ALTO A SINISTRA
var rad = 32;
draw_set_alpha(0.35);
draw_circle_colour(rad * 2, rad * 2, rad * 3, merge_colour(c_yellow, c_white, 0.5), c_white, false);
draw_set_alpha(1);
draw_circle_colour(0 + rad * 2, 0 + rad *2, rad, c_yellow, c_yellow, false);
//draw_sprite_part(spr_gui,0,714,288,160,128,clockXMargin,clockYMargin);

//DISEGNA L'INVENTARIO SE VIENE APERTO
if(openInventory) {
    draw_menu_centered("Resume","Options","Exit Game");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!debug)
    exit;

with(obj_solid) {
    draw_rectangle_color(bbox_left,bbox_top,bbox_right,bbox_bottom,c_yellow,c_yellow,c_yellow,c_yellow,true);
}

with(obj_player) {
    draw_rectangle_color(bbox_left,bbox_top,bbox_right,bbox_bottom,c_yellow,c_yellow,c_yellow,c_yellow,true);
}

with(obj_crop) {
    draw_text(x,y,string(x));
    draw_text(x,y+32,string(y));
}

with(obj_cursor) {
    draw_text(x,y,string(x));
    draw_text(x,y+20,string(y));
}

draw_set_alpha(0.3);

//Disegna le linee verticali della griglia
var repeatTimes = roomWidth div cellSize;
for(var i = 0; i &lt; repeatTimes; i++) {
    draw_line_colour(i * cellSize, 0, i * cellSize, roomHeight, c_red, c_red);
}

//Disegna le linee orizzontali della griglia
var repeatTimes = roomHeight div cellSize;
for(var i = 0; i &lt; repeatTimes; i++) {
    draw_line_colour(0,i * cellSize, roomWidth, i * cellSize, c_red, c_red);
}

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
