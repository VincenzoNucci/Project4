<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_depthobject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

cellSize = 32;
item_spr = spr_inventory_items;
spr_width = sprite_get_width(item_spr);
spr_height = sprite_get_height(item_spr);

nItem = -1;
xFrame = 0;
yFrame = 0;

xOffset = cellSize / 2;
yOffset = cellSize * (2/3);

dropMove = true;
var itemDir = irandom_range(0,359);
var len = 32;
goalX = x + lengthdir_x(len, itemDir); 
goalY = y + lengthdir_y(len, itemDir);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movimento dopo che sono stato scartato dall'inventario
if(dropMove) {
    x = lerp(x, goalX, 0.1);
    y = lerp(y, goalY, 0.1);
    if(abs(x-goalX) &lt; 1 &amp;&amp; abs(y-goalY) &lt; 1) {
        dropMove = false;
    }
} else {
    var px = obj_player.x;
    var py = obj_player.y;
    var radius = 32;
    
    //Il player è nel range di raccolta
    if(point_in_rectangle(px, py, x-radius, y-radius, x+radius, y+radius)) {
        radius = 2;
        //Riduco il raggio per controllare se devo smettere di muovermi verso il player
        if(!point_in_rectangle(px, py, x-radius, y-radius, x+radius, y+radius)) {
            x = lerp(x, px, 0.1);
            y = lerp(y, py, 0.1);
        } else {
            //Se il player è 2 px da me, sono stato raccolto
            var num = nItem;
            with(obj_inventory) {
                var ds_inv = ds_inventory;
                var pickedUp = false;
                //Cerco uno slot libero per l'oggetto
                for(var i = 0; i &lt; inv_slots; i++) {
                    if(ds_inventory[# 0, i] == num) {
                        ds_inventory[# 1, i] += 1;
                        pickedUp = true;
                        show_debug_message("Oggetto raccolto: " + string(num));
                        break;
                    }
                }
                //Nessuno slot libero ha preso l'oggetto, forse ci sono oggetti dello stesso tipo a cui aggiungere +1
                if(!pickedUp) {
                    for(i = 0; i &lt; inv_slots; i++) {
                        if(ds_inventory[# 0, i] == item.none) {
                            ds_inventory[# 0, i] = num;
                            ds_inventory[# 1, i] += 1;
                            pickedUp = true;
                            show_debug_message("Oggetto raccolto: " + string(num));
                            break;
                        }
                    }    
                }
            }
            
            if(pickedUp) {
                if(!instance_exists(obj_notificator)) {
                    instance_create(0,0,obj_notificator);
                }
                with(obj_notificator) {
                    if(!ds_exists(ds_notifications, ds_type_grid)) {
                        ds_notifications = ds_grid_create(2, 1);
                        var notifGrid = ds_notifications;
                        notifGrid[# 0, 0] = 1;
                        notifGrid[# 1, 0] = obj_inventory.ds_items_info[# 0, num];
                    } else {
                        //Resetto l'alfa della notifica perchè ne sta stampando una nuova mentre le vecchie scomparivano
                        event_perform(ev_other, ev_user0);
                        var notifGrid = ds_notifications;
                        var gridHeight = ds_grid_height(notifGrid);
                        var name = notifGrid[# 1, 0] = obj_inventory.ds_items_info[# 0, num];
                        var notifInGrid = false;
                        
                        for(i = 0; i &lt; gridHeight; i++) {
                            if(name == notifGrid[# 1, i]) {
                                notifGrid[# 0, i] += 1;
                                notifGrid = true;
                                break;
                            }
                        }
                        //L'oggetto non esiste nelle notifiche. Deve quindi essere ridimensionata la griglia e aggiunta la nuova notifica
                        if(!notifGrid) {
                            ds_grid_resize(notifGrid, 2, gridHeight + 1);
                            notifGrid[# 0, gridHeight] = 1;
                            notifGrid[# 1, gridHeight] = obj_inventory.ds_items_info[# 0, num];
                        }
                        
                    }
                }
                instance_destroy();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_part(item_spr, 0, cellSize * xFrame, cellSize * yFrame, cellSize, cellSize, x-xOffset, y-yOffset);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
