<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//database con i tipi di crops
ds_crops_types = -1;
//database con i crop che esistono nel gioco (per non piantarli due volte nello stesso punto)
ds_crops_instances = -1;
//Data grid per la persistenza dei crop (quando cambio stanzz)
ds_crops_data = ds_grid_create(4,1);
ds_grid_clear(ds_crops_data, -1);

enum crop {
    tomato = 0,
    potato = 1,
    carrot = 2,
    artichoke = 3,
    chilli = 4,
    gourd = 5,
    corn = 6
}

create_crop_type(4, 40);   //TOMATO
create_crop_type(3, 35);   //POTATO
create_crop_type(2, 25);   //CARROT
create_crop_type(4, 45);   //ARTICHOKE
create_crop_type(3, 30);   //CHILLI
create_crop_type(2, 20);   //GOURD
create_crop_type(5, 50);   //CORN

//INDICA SE SONO IN MODALITà DI PIANTARE
planting = false;
selectCrop = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ds_exists(ds_crops_types, ds_type_grid)) {
    ds_grid_destroy(ds_crops_types);
}
if(ds_exists(ds_crops_instances, ds_type_grid)) {
    ds_grid_destroy(ds_crops_instances);
}
if(ds_exists(ds_crops_data, ds_type_grid)) {
    ds_grid_destroy(ds_crops_data);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if(keyboard_check_pressed(ord("P"))) {
    planting = !planting;
}

if(room != rm_1) {
    planting = false;
    exit;
}

if(planting) {
    
    if(mouse_wheel_up()) {
        selectCrop = clamp(selectCrop + 1,0,sprite_get_number(spr_crops_picked) - 1);
    }
    if(mouse_wheel_down()) {
        selectCrop = clamp(selectCrop - 1,0,sprite_get_number(spr_crops_picked) - 1);
    }
    
    if(mouse_check_button_pressed(mb_left)) {
        instance_create_crop(obj_cursor.mouse_xx,obj_cursor.mouse_yy,selectCrop);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//se sono nella fattoria posso accedere ai crop come istanze, altrimenti devo usare la grid
if(room == rm_1) {
    //Come crescono i crop
    if(instance_exists(obj_crop)) {
        with(obj_crop) {
            if(growthStage &lt; maxGrowthStage) {
                daysOld += 1;
                growthStage = daysOld div growthStageDuration;
            } else {
                growthStage = maxGrowthStage;
                fullyGrown = true;
                alarm[0] = 1;
            }
        }
    }
} else if(ds_crops_data[# 0, 0] != -1) {
    var height = ds_grid_height(ds_crops_data);
    for(var i = 0; i &lt; height; i++) {
        ds_crops_data[# 3, i] += 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == rm_1) {
    var cropsNum = instance_number(obj_crop);
    if(cropsNum &gt; 0) {
        //Ci sono crops da salvare nella persistenza
        ds_grid_resize(ds_crops_data, ds_grid_width(ds_crops_data), cropsNum);
        
        var
        gw = ds_grid_width(ds_crops_instances),
        gh = ds_grid_height(ds_crops_instances),
        slot = 0;
        
        for(var i = 0; i &lt; gw; i++) {
            for(var j = 0; j &lt; gh; j++) {
                var inst = ds_crops_instances[# i, j];
                if(inst != 0) {
                    ds_crops_data[# 0, slot] = i;
                    ds_crops_data[# 1, slot] = j;
                    ds_crops_data[# 2, slot] = inst.cropType;
                    ds_crops_data[# 3, slot] = inst.daysOld;
                    
                    slot += 1;
                }
            }
        }
    }
    //Si può distruggere perchè tiene traccia dei crops nella stanza attuale
    ds_grid_destroy(ds_crops_instances);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == rm_1) {
    ds_crops_instances = ds_grid_create(room_width div obj_game.cellSize, room_height div obj_game.cellSize);
    
    ds_grid_clear(ds_crops_instances, 0);
    
    if(ds_crops_data[# 0, 0] != -1) {
        var cropsNum = ds_grid_height(ds_crops_data);
        for(var i = 0; i &lt; cropsNum; i++) {
            respawn_crop(
                ds_crops_data[# 0, i],
                ds_crops_data[# 1, i],
                ds_crops_data[# 2, i],
                ds_crops_data[# 3, i]
            );
        }
        
        with(obj_crop) {
            growthStage = daysOld div growthStageDuration;
            if(growthStage &gt;= maxGrowthStage) {
                growthStage = maxGrowthStage;
                fullyGrown = true;
                alarm[0] = 1;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ds_exists(ds_crops_types, ds_type_grid)) {
    ds_grid_destroy(ds_crops_types);
}
if(ds_exists(ds_crops_instances, ds_type_grid)) {
    ds_grid_destroy(ds_crops_instances);
}
if(ds_exists(ds_crops_data, ds_type_grid)) {
    ds_grid_destroy(ds_crops_data);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//se sono in modalità di planting, disegno dove è il mouse il crop da piantare
if(planting) {
    //GRID SNAPPING
    var cs = obj_game.cellSize;
    var xx = obj_cursor.mouse_xx div cs;
    var yy = obj_cursor.mouse_yy div cs;
    
    var cell = ds_crops_instances[# xx,yy];
    
    //Colore di default che indica se posso piantare o no in quel punto
    var color = c_red;
    
    if(cell == 0) {
        //Controllo se posso piantare o no e cambio colore del rettangolo
        var tile = tile_layer_find(obj_game.tilesDepthSoil,obj_cursor.mouse_xx,obj_cursor.mouse_yy);
    
        if(tile != -1) {
            color = c_lime;
        }
    }
    
    //Aggiorno le variabili per la grafica
    xx *= cs;
    yy *= cs;
    
    draw_set_alpha(0.5);
    draw_rectangle_colour(xx,yy,xx+cs,yy+cs,color,color,color,color,false);
    draw_set_alpha(1);
    
    draw_sprite_ext(spr_crops_picked, selectCrop, xx + (cs /2), yy + (cs / 2),1,1,0,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
