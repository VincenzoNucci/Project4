<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Deve stare sopra il daycicle quando viene disegnato
depth = obj_daycycle.depth - 1;
//Fattore di ingrandimento dovuto al fatto che disegno su GUI e il view è la metà del port
scale = 2;

spacing_x = 2;
spacing_y = 4;

slotSize = 32;

selectedSlot = 0;
pickupItem = -1;
m_slotx = 0;
m_sloty = 0;
mouse_xx = 0;
mouse_yy = 0;
mouseInInventory = false;
//Da 0-16 slot
inv_slots = 17;
inv_slots_width = 8;
inv_slots_height = 2;

spr_inv_UI = spr_inventory_UI;
spr_inv_items = spr_inventory_items;

spr_inv_items_columns = sprite_get_width(spr_inv_items) / slotSize;
spr_inv_items_rows = sprite_get_height(spr_inv_items) / slotSize;

openInventory = false;

gui_width = display_get_gui_width();
gui_height = display_get_gui_height();

inv_UI_width = 288;
inv_UI_height = 192;

inv_UI_x = (gui_width * 0.5) - ((inv_UI_width * 0.5) * scale);
inv_UI_y = (gui_height * 0.5) - ((inv_UI_height * 0.5) * scale);

//Posizioni di partenza della scritta nome player e soldi
info_x = inv_UI_x + 9 * scale;
info_y = inv_UI_y + 9 * scale;

slot_x = info_x;
slot_y = inv_UI_y + (40 * scale);

descX = info_x;
descY = inv_UI_y + (156 * scale);

ds_player_info = ds_grid_create(2, 4);
ds_player_info[# 0, 0] = "Gold";
ds_player_info[# 0, 1] = "Silver";
ds_player_info[# 0, 2] = "Copper";
ds_player_info[# 0, 3] = "Name";

ds_player_info[# 1, 0] = irandom_range(0,99);
ds_player_info[# 1, 1] = irandom_range(0,99);
ds_player_info[# 1, 2] = irandom_range(0,99);
ds_player_info[# 1, 3] = "Player";

ds_inventory = ds_grid_create(2, inv_slots);

enum item {
    none = 0,
    tomato = 1,
    potato = 2,
    carrot = 3,
    artichoke = 4,
    chilli = 5,
    gourd = 6,
    corn = 7,
    wood = 8,
    stone = 9,
    bucket = 10,
    chair = 11,
    picture = 12,
    axe = 13,
    potion = 14,
    starfish = 15,
    mushroom = 16,
    height = 17
    
}

ds_items_info = ds_grid_create(2, item.height);

var z = 0, i = 0;
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Tomato";
ds_items_info[# z, i++] = "Potato";
ds_items_info[# z, i++] = "Carrot";
ds_items_info[# z, i++] = "Artichoke";
ds_items_info[# z, i++] = "Chilli";
ds_items_info[# z, i++] = "Gourd";
ds_items_info[# z, i++] = "Corn";
ds_items_info[# z, i++] = "Wood";
ds_items_info[# z, i++] = "Stone";
ds_items_info[# z, i++] = "Bucket";
ds_items_info[# z, i++] = "Chair";
ds_items_info[# z, i++] = "Picture";
ds_items_info[# z, i++] = "Axe";
ds_items_info[# z, i++] = "Potion";
ds_items_info[# z, i++] = "Starfish";
ds_items_info[# z, i++] = "Mushroom";

z = 1; i = 0;
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "Nothing";
ds_items_info[# z, i++] = "A mushroom";

for(var i = 0; i &lt; inv_slots; i++) {
    ds_inventory[# 0, i] = irandom_range(1, item.height - 1);
    ds_inventory[# 1, i] = irandom_range(1, 10);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ds_exists(ds_player_info, ds_type_grid)) {
    ds_grid_destroy(ds_player_info);
}
if(ds_exists(ds_inventory, ds_type_grid)) {
    ds_grid_destroy(ds_inventory);
}
if(ds_exists(ds_items_info, ds_type_grid)) {
    ds_grid_destroy(ds_items_info);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(vk_tab)) {
    openInventory = !openInventory;
}

if(!openInventory)
    exit;
    
mouse_xx = obj_cursor.x;
mouse_yy = obj_cursor.y;

//La distanza insieme ai bordi tra uno slot e l'altro in orizzontale e verticale
var slotSpacingX = (slotSize + spacing_x) * scale;
var slotSpacingY = (slotSize + spacing_y) * scale;
//Differenza tra le coordinate del mouse e l'inizio degli slot (diventa positiva quando il mouse è sopra gli slot)
var mouseXInventory = mouse_xx + slotSpacingX - slot_x;
var mouseYInventory = mouse_yy - slot_y;
//Le coordinate del mouse diviso la spaziatura tra gli slot, indica sopra quale slot sto con il mouse
var nx = mouseXInventory / slotSpacingX;
var ny = mouseYInventory / slotSpacingY;


if(nx &gt;= 0 &amp;&amp; nx &lt; inv_slots_width + 1 &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; inv_slots_height) {
    mouseInInventory = true;
    //Il punto in cui sono all'interno dello slot con il mouse (x e y all'interno del quadrato dello slot)
    var sx = mouseXInventory - (nx * slotSpacingX); 
    var sy = mouseYInventory - (ny * slotSpacingY);
    
    if(sx &lt; slotSize * scale &amp;&amp; sy &lt; slotSize * scale) {
        m_slotx = floor(nx);
        m_sloty = floor(ny);
    }
} else {
    mouseInInventory = false;
    
}
selectedSlot = min(inv_slots - 1, m_slotx + (m_sloty * inv_slots_width));

//Item pickup dall'inventario
var inv_grid = ds_inventory;
var selectedItem = inv_grid[# 0, selectedSlot];
var createNotif = false;
var num = -1;

if(pickupItem != -1) {
    if(mouse_check_button_pressed(mb_left)) {
        //Sto gettando via l'oggetto dall'inventario
        if(!mouseInInventory) {
            createNotif = true;
            var pitem = inv_grid[# 0, pickupItem];
            num = pitem;
            inv_grid[# 1, pickupItem] -= 1;
            if(inv_grid[# 1, pickupItem] &lt;= 0) {
                inv_grid[# 0, pickupItem] = item.none;
                pickupItem = -1;
            }
            
            var itemInst = instance_create(obj_player.x, obj_player.y, obj_item);
            with(itemInst) {
                nItem = pitem;
                show_debug_message("itemNum appena creato: " + string(nItem));
                xFrame = nItem mod (spr_width/cellSize);
                yFrame = nItem div (spr_width/cellSize);
            }
        }
        //Sposto l'oggetto in una casella vuota
        else if(selectedItem == item.none) {
            inv_grid[# 0, selectedSlot] = inv_grid[# 0, pickupItem];
            inv_grid[# 1, selectedSlot] = inv_grid[# 1, pickupItem];
            
            inv_grid[# 0, pickupItem] = item.none;
            inv_grid[# 1, pickupItem] = 0;
            
            pickupItem = -1;
        //Sposto l'oggetto sopra un oggetto dello stesso tipo, quindi sommo le quantità
        } else if(selectedItem == inv_grid[# 0, pickupItem]) {
            if(selectedSlot != pickupItem) {
                inv_grid[# 1, selectedSlot] += inv_grid[# 1, pickupItem];
            
                inv_grid[# 0, pickupItem] = item.none;
                inv_grid[# 1, pickupItem] = 0;
            }
            pickupItem = -1;
        //Sposto l'oggetto sopra un oggetto di tipo differente, quindi scambio le posizioni tra i due oggetti
        } else {
            var itemNum = inv_grid[# 1, selectedSlot];
            inv_grid[# 0, selectedSlot] = inv_grid[# 0, pickupItem];
            inv_grid[# 1, selectedSlot] = inv_grid[# 1, pickupItem];
            
            inv_grid[# 0, pickupItem] = selectedItem;
            inv_grid[# 1, pickupItem] = itemNum;
            
            //pickupItem = -1;
        }
    }

} else {
    if(selectedItem != item.none) {
        if(mouse_check_button_pressed(mb_right)) {
            createNotif = true;
            num = inv_grid[# 0, selectedSlot]; 
            inv_grid[# 1, selectedSlot] -= 1;
            if(inv_grid[# 1, selectedSlot] &lt;= 0) {
                inv_grid[# 0, selectedSlot] = item.none;
            }
            
            var itemInst = instance_create(obj_player.x, obj_player.y, obj_item);
            with(itemInst) {
                nItem = selectedItem;
                xFrame = nItem mod (spr_width/cellSize);
                yFrame = nItem div (spr_width/cellSize);
            }
        }
        
        if(mouse_check_button_pressed(mb_left)) {
            pickupItem = selectedSlot;
        }
    }
}

if(createNotif) {
    if(!instance_exists(obj_notificator)) {
            instance_create(0,0,obj_notificator);
    }
    with(obj_notificator) {
        if(!ds_exists(ds_notifications, ds_type_grid)) {
            ds_notifications = ds_grid_create(2, 1);
            var notifGrid = ds_notifications;
            notifGrid[# 0, 0] = -1;
            notifGrid[# 1, 0] = obj_inventory.ds_items_info[# 0, num];
        } else {
            //Resetto l'alfa della notifica perchè ne sta stampando una nuova mentre le vecchie scomparivano
            event_perform(ev_other, ev_user0);
            var notifGrid = ds_notifications;
            var gridHeight = ds_grid_height(notifGrid);
            var name = notifGrid[# 1, 0] = obj_inventory.ds_items_info[# 0, num];
            var notifInGrid = false;
            
            for(i = 0; i &lt; gridHeight; i++) {
                if(name == notifGrid[# 1, i]) {
                    notifGrid[# 0, i] -= 1;
                    notifGrid = true;
                    break;
                }
            }
            //L'oggetto non esiste nelle notifiche. Deve quindi essere ridimensionata la griglia e aggiunta la nuova notifica
            if(!notifGrid) {
                ds_grid_resize(notifGrid, 2, gridHeight + 1);
                notifGrid[# 0, gridHeight] = -1;
                notifGrid[# 1, gridHeight] = obj_inventory.ds_items_info[# 0, num];
            }
            
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ds_exists(ds_player_info, ds_type_grid)) {
    ds_grid_destroy(ds_player_info);
}
if(ds_exists(ds_inventory, ds_type_grid)) {
    ds_grid_destroy(ds_inventory);
}
if(ds_exists(ds_items_info, ds_type_grid)) {
    ds_grid_destroy(ds_items_info);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!openInventory)
    exit;
//Disegno l'inventario vuoto
draw_sprite_part_ext(spr_inv_UI, 0, slotSize, 0, inv_UI_width, inv_UI_height, inv_UI_x, inv_UI_y, scale, scale, c_white, 1);

var info_grid = ds_player_info;

//Scrivo "Player: Name"
draw_set_font(fnt_text_24);
draw_text_colour(info_x, info_y, info_grid[# 0, 3] + ": " + info_grid[# 1, 3], c_black, c_black, c_black, c_black, 1);

//Scrivo quanti soldi ha il player
draw_set_font(fnt_smalldigits);
for(var i = 0; i &lt; 3; i++) {
    draw_text_colour(info_x + (192 * scale) + ((15+18)*scale*i), info_y, string(info_grid[# 1, i]), c_black, c_black, c_black, c_black, 1);
}

var iRow = 0, iCol = 0, xx = 0, yy = 0, curItem, sprite_x, sprite_y, inv_grid = ds_inventory;
//Disegno gli slot con gli oggetti
for(i = 0; i &lt; inv_slots; i++) {
    
    xx = slot_x + ((slotSize + spacing_x)*iRow*scale);
    yy = slot_y + ((slotSize + spacing_y)*iCol*scale);
    
    curItem = inv_grid[# 0, i];
    sprite_x = (curItem mod spr_inv_items_columns) * slotSize;
    sprite_y = (curItem div spr_inv_items_columns) * slotSize;
    
    //Disegno uno slot ingrandito per la scale
    draw_sprite_part_ext(spr_inv_UI, 0, 0, 0, slotSize, slotSize, xx, yy, scale, scale, c_white, 1);
    
    draw_rectangle_colour(xx, yy, xx + slotSize * scale, yy + slotSize * scale, c_red, c_red, c_red, c_red, true);
    
    switch(i) {
        case selectedSlot:
            if(curItem &gt; 0)
                draw_sprite_part_ext(spr_inv_items, 0, sprite_x, sprite_y, slotSize, slotSize, xx,yy,scale,scale,c_white,1);
            draw_set_blend_mode(bm_add);
            draw_sprite_part_ext(spr_inv_UI, 0, 0, 0, slotSize, slotSize, xx, yy, scale, scale, c_white, 0.3);
            draw_set_blend_mode(bm_normal);
        break;
        
        case pickupItem:
            if(curItem &gt; 0)
                draw_sprite_part_ext(spr_inv_items, 0, sprite_x, sprite_y, slotSize, slotSize, xx,yy,scale,scale,c_white,0.2);
        break;
        
        default :
            if(curItem &gt; 0)
                draw_sprite_part_ext(spr_inv_items, 0, sprite_x, sprite_y, slotSize, slotSize, xx,yy,scale,scale,c_white,1);
        break;    
    }
    
    
    
    if(curItem &gt; 0) {
        var number = inv_grid[# 1, i];
        draw_text_colour(xx, yy, string(number), c_black, c_black, c_black, c_black, 1);
    }
    
    iRow = i mod inv_slots_width;
    iCol = i div inv_slots_width;
    
}

var info_grid = ds_items_info, description = "";
curItem = inv_grid[# 0, selectedSlot];
if(curItem &gt; 0) {
    description = info_grid[# 0, curItem] + ": " + info_grid[# 1, curItem];
    draw_set_font(fnt_text_12); 
    draw_text_ext_colour(descX, descY, description, string_height("M"), inv_UI_width * scale - (spacing_x * 2), c_black, c_black, c_black, c_black, 1);
    draw_set_font(-1);
}

if(pickupItem != -1) {
    curItem = inv_grid[# 0, pickupItem];
    sprite_x = (curItem mod spr_inv_items_columns) * slotSize;
    sprite_y = (curItem div spr_inv_items_columns) * slotSize;
    draw_sprite_part_ext(spr_inv_items, 0, sprite_x, sprite_y, slotSize, slotSize, mouse_xx,mouse_yy,scale,scale,c_white,1);
    
    var itemNum = inv_grid[# 1, pickupItem];
    draw_text_colour(mouse_xx, mouse_yy, string(number), c_black, c_black, c_black, c_black, 1);
}

//Resetto il font di sistema
draw_set_font(-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
