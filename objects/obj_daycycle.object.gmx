<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>seconds = 0;
minutes = 0;
hours = 0;

day = 1;
month = 1;
season = 1;
year = 1131;

//secondi per step di gioco
timeIncrement = 100;
timePause = true;

maxDarkness = 0.7;
darkness = 0;
light_color = c_black;
drawDaylight = false;

enum day_phase {
    sunrise = 6,
    daytime = 8.5,
    sunset = 18,
    nighttime = 22
}

guiWidth = display_get_gui_width();
guiHeight = display_get_gui_height();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(ord("T")))
    timePause = !timePause;
if(timePause)
    exit;

seconds += timeIncrement;

minutes = seconds / 60;
hours = minutes / 60;

darkness = hours / 24;


if(drawDaylight) {
    var phaseStart, phaseEnd;
    var darks;
    var colours;
    if(hours &gt; day_phase.sunrise &amp;&amp; hours &lt;= day_phase.daytime) {
        darks = array_initialize_gm2(maxDarkness, 0.2);
        colours = array_initialize_gm2(merge_colour(c_black, c_navy, 0.3), c_orange);
        phaseStart = day_phase.sunrise;
        phaseEnd = day_phase.daytime;
    } else if(hours &gt; day_phase.daytime &amp;&amp; hours &lt;= day_phase.sunset) {
        darks = array_initialize_gm2(0.2, 0, 0, 0, 0.2);
        colours = array_initialize_gm2(c_orange, c_orange, c_white, c_orange, c_orange);
        phaseStart = day_phase.daytime;
        phaseEnd = day_phase.sunset;
    } else if(hours &gt; day_phase.sunset &amp;&amp; hours &lt;= day_phase.nighttime) {
        darks = array_initialize_gm2(0.2, maxDarkness);
        colours = array_initialize_gm2(c_orange, c_navy, merge_colour(c_black, c_navy, 0.3));
        phaseStart = day_phase.sunset;
        phaseEnd = day_phase.nighttime;
    } else {
        darks = array_initialize_gm2(maxDarkness);
        colours = array_initialize_gm2(merge_colour(c_black,c_navy,0.3));
        phaseStart = day_phase.nighttime;
        phaseEnd = day_phase.sunrise;
    }
    
    //Modifica darkness e colours in base al tempo
    //Colour
    if(phaseStart == day_phase.nighttime) {
        light_color = colours[0];
    } else {
        var cc = ((hours - phaseStart) / (phaseEnd - phaseStart)) * (array_length_1d(colours) - 1);
        var c1 = colours[floor(cc)];
        var c2 = colours[ceil(cc)];
        light_color = merge_colour(c1, c2, cc-floor(cc));
    }
    //Darkness
    if(phaseStart == day_phase.nighttime) {
        darkness = darks[0];
    } else {
        var dd = ((hours - phaseStart) / (phaseEnd - phaseStart)) * (array_length_1d(darks) - 1);
        var d1 = darks[floor(dd)];
        var d2 = darks[ceil(dd)];
        darkness = lerp(d1, d2, dd-floor(dd));
    }
}


//Controllo di ciclo
if(hours &gt;= 24) {
    seconds = 0;
    day += 1;
    with(obj_crops) {
        event_perform(ev_other, ev_user0);
    }
    if(day &gt; 30) {
        day = 1;
        month += 1;
        season = (month div 3) + 1;
        if(month &gt; 12 &amp;&amp; season &gt;= 4) {
            year += 1;
            month = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(room) {
    //Elenco tutte le stanze all'esterno dove far disegnare l'andamento della luce del giorno
    case rm_1:
        drawDaylight = true;
    break;
    
    case rm_inn:
        drawDaylight = false;
    break;
    
    default:
        drawDaylight = false;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(drawDaylight) {
    draw_set_alpha(darkness);
    draw_rectangle_colour(0, 0, guiWidth, guiHeight, light_color, light_color,light_color,light_color,false);
    draw_set_alpha(1);
}

var c = c_yellow;
draw_text_colour(10,10,string(seconds), c,c,c,c,1);
draw_text_colour(10,30,string(minutes), c,c,c,c,1);
draw_text_colour(10,50,string(hours), c,c,c,c,1);
draw_text_colour(10,70,string(day), c,c,c,c,1);
draw_text_colour(10,90,string(month), c,c,c,c,1);
draw_text_colour(10,110,string(season), c,c,c,c,1);
draw_text_colour(10,130,string(year), c,c,c,c,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
