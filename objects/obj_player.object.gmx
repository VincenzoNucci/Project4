<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_character_mask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_depthobject</parentName>
  <maskName>spr_character_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Eredita il collideable da depthobject che lo eredita da solid
event_inherited();

speakingNPC = noone;

spd = 3;
facing = 0;
talkNotify = false;
speaking_radius = 15;
paused = false;
//la posizione del pezzo di sprite da prendere dallo sheet
x_frame = 0;
y_frame = 8;

x_offset = sprite_get_xoffset(mask_index);
y_offset = sprite_get_yoffset(mask_index);

//GENERALIZZARE GLI SPRITE PER POTERLI CAMBIARE POI
spr_shadow = spr_character_shadow;
spr_base = spr_base_male_1;
spr_torso = spr_male_torso_shirt_white;
spr_jacket = -1
spr_legs = spr_male_legs_pants_green;
spr_hair = spr_male_hair_bedhead_pink;
spr_head = -1
spr_feet = spr_male_feet_shoes_black;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>input_left = keyboard_check(ord("A"));
input_right = keyboard_check(ord("D"));
input_up = keyboard_check(ord("W"));
input_down = keyboard_check(ord("S"));

amountMoveX = 0;
amountMoveY = 0;

amountMoveX = (input_right - input_left) * spd;
amountMoveY = (input_down - input_up) * spd;

//GET DIRECTION FACING
if(amountMoveX != 0) {
    switch(sign(amountMoveX)) {
        case 1:
            facing = dir.right;
        break;
        
        case -1:
            facing = dir.left;
        break;
    }
} else if(amountMoveY != 0) {
    switch(sign(amountMoveY)) {
        case 1:
            facing = dir.down;
        break;
        
        case -1:
            facing = dir.up;
        break;
    }
} else {
    facing = -1;
}

//COLLISION CHECK (prima di toccarsi fisicamente, pixel perfect prima)
//Horizontal
if(amountMoveX != 0) {
    var collisionH = instance_place(x + amountMoveX, y, obj_solid);
    if(collisionH != noone &amp;&amp; collisionH.collideable) {
        for(var i = 0; i &lt; abs(amountMoveX); i++) {
            if(!place_meeting(x+sign(amountMoveX), y, obj_solid)) {
                x += sign(amountMoveX);
            } else {
                //mi fermo prima di toccare
                if(object_get_parent(collisionH.object_index) == obj_NPC &amp;&amp; point_in_circle(collisionH.x,collisionH.y,x,y,speaking_radius) &amp;&amp; array_length_1d(collisionH.text) &gt; 0) {
                    speakingNPC = collisionH;
                    talkNotify = true;
                }
                break;
            }
        }
        amountMoveX = 0;
    } else {
        talkNotify = false;
        speakingNPC = noone;
    }
}
//Vertical
if(amountMoveY != 0) {
    var collisionV = instance_place(x, y + amountMoveY, obj_solid);
    if(collisionV != noone &amp;&amp; collisionV.collideable) {
        for(var i = 0; i &lt; abs(amountMoveY); i++) {
            if(!place_meeting(x, y+sign(amountMoveY), obj_solid)) {
                y += sign(amountMoveY);
                talkNotify = false;
                speakingNPC = noone;
            } else {
                if(object_get_parent(collisionV.object_index) == obj_NPC &amp;&amp; point_in_circle(collisionV.x,collisionV.y,x,y,speaking_radius) &amp;&amp; array_length_1d(collisionV.text) &gt; 0) {
                    speakingNPC = collisionV;
                    talkNotify = true;
                }
                break;
            }
        }
        amountMoveY = 0;
    } else {
        talkNotify = false;
        speakingNPC = noone;
    }
}

//Collisione con NPC per parlare


//Collisione con OGGETTI DI TRANSIZIONE (si toccano fisicamente)
var inst = instance_place(x,y,obj_transition);
if(inst != noone &amp;&amp; facing == inst.playerFacingBefore) {
    with(obj_game) {
        if(!doTransition) {
            spawnRoom = inst.targetRoom;
            spawnX = inst.targetX;
            spawnY = inst.targetY;
            spawnPlayerFacing = inst.playerFacingAfter;
            doTransition = true;
        }
    }
}

//APPLY MOVEMENT
x += amountMoveX;
y += amountMoveY;

if(talkNotify &amp;&amp; speakingNPC != noone &amp;&amp; keyboard_check_pressed(ord("E"))) {
    var bubble = instance_create(x,y,obj_speech_bubble);
    with(bubble) {
        text = other.speakingNPC.text;
        textWrapped = string_wrap(text[page],maxTextWidth);
        strLength = string_length(textWrapped);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.pause)
    exit;

//quanto dura l'animazione del camminare
var anim_length = 9,
    frame_size = 64,
    anim_speed = 12;
    
//QUALI FRAME SELEZIONARE IN BASE ALLA DIREZIONE
switch(facing) {
    case dir.left:
        y_frame = 9;
    break;
    
    case dir.right:
        y_frame = 11;
    break;
    
    case dir.up:
        y_frame = 8;
    break;
    
    case dir.down:
        y_frame = 10;
    break;
    
    default:
        x_frame = 0;
    break;
}

//VARIABILI PER DISEGNARE BENE LA COLLISION MASK
var xx = x - x_offset,
    yy = y - y_offset;

//incremento del frame per l'animazione del camminare
if(x_frame + (anim_speed/60) &lt; anim_length) {
    x_frame += anim_speed/60;
} else {
    x_frame = 1;
}

//DRAW_CHARACTER SHADOW
if(spr_shadow != -1)
    draw_sprite(spr_shadow, 0, x, y);

//DRAW CHARACTER BASE
if(spr_base != -1)
    draw_sprite_part(spr_base, 0, floor(x_frame)*frame_size, y_frame*frame_size, frame_size, frame_size, xx, yy);

//DRAW CHARACTER FEET
if(spr_feet != -1)
    draw_sprite_part(spr_feet, 0, floor(x_frame)*frame_size, y_frame*frame_size, frame_size, frame_size, xx, yy);

//DRAW CHARACTER LEGS
if(spr_legs != -1)
    draw_sprite_part(spr_legs, 0, floor(x_frame)*frame_size, y_frame*frame_size, frame_size, frame_size, xx, yy);

//DRAW CHARACTER SHIRT
if(spr_torso != -1)
    draw_sprite_part(spr_torso, 0, floor(x_frame)*frame_size, y_frame*frame_size, frame_size, frame_size, xx, yy);

//DRAW CHARACTER JACKET
if(spr_jacket != -1)
    draw_sprite_part(spr_jacket, 0, floor(x_frame)*frame_size, y_frame*frame_size, frame_size, frame_size, xx, yy);

//DRAW CHARACTER HAIR
if(spr_hair != -1)
    draw_sprite_part(spr_hair, 0, floor(x_frame)*frame_size, y_frame*frame_size, frame_size, frame_size, xx, yy);

//DRAW CHARACTER HEAD
if(spr_head != -1)
    draw_sprite_part(spr_head, 0, floor(x_frame)*frame_size, y_frame*frame_size, frame_size, frame_size, xx, yy);

if(talkNotify) {
    var n = "[E] Talk";
    draw_text_colour(x,y - sprite_height,n,c_yellow, c_yellow, c_yellow, c_yellow, 1);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
